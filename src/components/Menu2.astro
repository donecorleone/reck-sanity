---


---
<div class="wrapper">
<main class="app">
    <!--? Nav -->
    <div class="nav">
        <div class="nav_logo">
            <span>Akira</span>
        </div>
        <div class="nav_menu">
            <div class="nav_menu_button --open-menu">
                <div class="nav_menu_button_text">
                    <span>Menu</span>
                </div>
                <div class="nav_menu_button_circle"></div>
            </div>
        </div>
    </div>
    <!--? Menu -->
    <div class="menu">
        <div class="menu_wrapper">
            <div class="menu_row">
                <div class="menu_row_pages">
                    <h2>Index</h2>
                    <h2>Projects</h2>
                    <h2>Experties</h2>
                    <h2>Contact</h2>
                </div>

                <div class="menu_row_info">
                    <div class="menu_row_info_location">
                        <span>Akira</span>
                        <span>Asakusa, Taito City</span>
                        <span>111-0032 Tokyo</span>
                        <span>Japan</span>
                    </div>
                    <div class="menu_row_info_social">
                        <span>Instagram</span>
                        <span>Linkedin</span>
                        <span>Twitter</span>
                        <span>Facebook</span>
                    </div>
                </div>
            </div>

            <div class="menu_row">
         
                <div class="menu_row_title">
                    <h1>A</h1>
                    <h1>K</h1>
                    <h1>I</h1>
                    <h1>R</h1>
                    <h1>A</h1>
                </div>
            </div>
        </div>
    </div>
   
    </main>
</div>
<style>

.wrapper {
    
    --primary: #e4e8ed;
    --secondary: #191919;
    --alternate: #d82e2e;

    font-size: max(100vw / 1920 * 10);


    background-color: var(--primary);
    color: var(--secondary);


}

/* Initial Set-up  */
.app {
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -webkit-tap-highlight-color: transparent;
}

input,
textarea {
    width: 100%;
    height: 8rem;
    padding: 1rem;
    background: rgba(249, 250, 250, 0.5);
    border: 1px solid #21212144;
    border-radius: 1rem;
    outline-color: var(--color-blue);
}
textarea {
    min-height: 16rem;
    height: auto;
    resize: vertical;
}

input::placeholder {
    vertical-align: middle;
}

*,
*:before,
*:after {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

h1 {
    font-size: 70px;
    line-height: 0.6;
}
h2 {
    font-size: 60px;
    line-height: 1.5;
}
p {
    font-size: 20px;
}
li,
span {
    font-size: 18px;
    line-height: 1.2;
    display: block;
}

/* ?Nav  */
.nav {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    padding: 2rem;

    display: flex;
    justify-content: space-between;
    z-index: 999;

    mix-blend-mode: difference;
    color: #fff;
}
.nav_logo span {
    font-size: 30px;
    text-transform: uppercase;
}
.nav_menu_button {
    background-color: var(--secondary);
    color: var(--primary);
    padding: 10px 20px;

    display: flex;
    align-items: center;
    gap: 1rem;
    border-radius: 25px;
    cursor: pointer;
}
.nav_menu_button_circle {
    width: 10px;
    height: 10px;
    border-radius: 25px;
    background-color: var(--alternate);
}


/*? Menu  */
.menu {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;

    background-color: var(--secondary);
    color: var(--primary);
    padding-top: 6rem;
    z-index: 40;
}
.menu_wrapper {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: inherit;
    padding: 6rem;
}
.menu_row {
    display: flex;
    justify-content: space-between;
}
.menu_row:nth-child(1) {
    align-items: flex-start;
    padding-left: 42rem;
    padding-right: 16rem;
}
.menu_row_info {
    display: flex;
    justify-content: space-between;
    gap: 12rem;
}

.menu_row:nth-child(2) {
    align-items: flex-end;
}
.menu_row_media {
    width: 50rem;
    height: 30rem;
    background-color: var(--primary);
    padding: 2rem;
}
.menu_row_media img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.menu_row_title {
    display: inline-flex;
}

@media screen and (max-width: 768px) {
    html {
        font-size: max(100vw / 768 * 10);
    }
    h1 {
        font-size: 22rem;
    }
    span {
        font-size: 2.4rem;
    }

    .hero_row_title {
        font-size: 8rem;
    }

    .menu {
        padding-top: 18rem;
    }
    .menu_row:nth-child(1) {
        padding-left: 0;
        padding-right: 0;
    }
    .menu_row_info {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }
    .menu_row_media {
        display: none;
    }
}



</style>


<script>

import gsap from "gsap";

const menu = {
    element: document.querySelector('.menu'),
    pages: document.querySelectorAll('.menu_row_pages > h2'),
    info: document.querySelectorAll('.menu_row_info > div > span'),
    title: document.querySelectorAll('.menu_row_title > h1'),
    media: document.querySelector('.menu_row_media'),
};
const button = {
    element: document.querySelector('.nav_menu_button'),
    text: document.querySelectorAll('.nav_menu_button_text > span'),
    open: document.querySelector('.--open-menu'),
    close: document.querySelector('.--close-menu'),
};
const clipPath = {
    init: 'inset(0% 0% 0% 0%)',
    bottom: 'inset(100% 0% 0% 0%)',
    top: 'inset(0% 0% 100% 0%)',
};
const tlMenu = gsap.timeline({
    paused: true,
    defaults: { duration: 1.6, ease: 'expo.inOut' },
});

let isEnabled = false;

const initMenu = () => {
    gsap.set(menu.element, { pointerEvents: 'none', clipPath: clipPath.bottom });
    gsap.set(menu.pages, { yPercent: 100, autoAlpha: 0 });
    gsap.set(menu.info, { yPercent: 100, autoAlpha: 0 });
    gsap.set(menu.title, { yPercent: 100, rotateY: 20, scale: 0.2 });
    gsap.set(menu.media, { clipPath: clipPath.bottom });

    animateInnerMenu();
};

const animateMenu = () => {
    if (!isEnabled) {
        gsap.to(menu.element, {
            duration: 1.2,
            pointerEvents: 'auto',
            clipPath: clipPath.init,
            ease: 'expo.inOut',
        });
    } else {
        gsap.to(menu.element, {
            duration: 0.8,
            clipPath: clipPath.top,
            ease: 'expo.inOut',
            onComplete: () => {
                gsap.set(menu.element, { pointerEvents: 'none', clipPath: clipPath.bottom });
            },
        });
    }
};

const animateInnerMenu = () => {
    tlMenu
        .to(
            menu.pages,
            {
                yPercent: 0,
                autoAlpha: 1,
                stagger: 0.032,
            },
            0.24
        )
        .to(
            menu.info,
            {
                yPercent: 0,
                autoAlpha: 1,
                stagger: 0.032,
            },
            0.24
        )
        .to(
            menu.title,
            {
                yPercent: 0,
                rotateY: 0,
                scale: 1,
                stagger: 0.032,
            },
            0
        )
        .to(
            menu.media,
            {
                clipPath: clipPath.init,
            },
            0
        );
};

const animateButton = (text: string) => {
    gsap.timeline()
        .to(button.element, {
            duration: 0.8,
            autoAlpha: 0,
            pointerEvents: 'none',
            onComplete: () => {
                button.text[0].textContent = text;
            },
        })
        .to(button.element, {
            duration: 0.8,
            autoAlpha: 1,
            pointerEvents: 'auto',
        });
};

const addEventListeners = () => {
    if (button.open) {
        button.open.addEventListener('click', () => {
            if (!isEnabled) {
                animateButton('Close');
                animateMenu();
                tlMenu.play();
            } else {
                animateButton('Menu');
                animateMenu();
                tlMenu.reverse(2);
            }

            isEnabled = !isEnabled;
        });
    }
};

window.addEventListener('DOMContentLoaded', () => {
    initMenu();
    addEventListeners();
});




</script>